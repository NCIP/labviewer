package gov.nih.nci.cagrid.coppa.person.service.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.cagrid.coppa.person.service.stubs.CoppaPersonServicePortType;
import gov.nih.nci.cagrid.coppa.person.service.stubs.service.CoppaPersonServiceAddressingLocator;
import gov.nih.nci.cagrid.coppa.person.service.common.CoppaPersonServiceI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class CoppaPersonServiceClient extends CoppaPersonServiceClientBase implements CoppaPersonServiceI {	

	public CoppaPersonServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CoppaPersonServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CoppaPersonServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CoppaPersonServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CoppaPersonServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CoppaPersonServiceClient client = new CoppaPersonServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public gov.nih.nci.cagrid.person.service.Person[] search(gov.nih.nci.cagrid.person.service.Person person) throws RemoteException, gov.nih.nci.cagrid.coppa.person.service.stubs.types.CoppaPersonServiceFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"search");
    gov.nih.nci.cagrid.coppa.person.service.stubs.SearchRequest params = new gov.nih.nci.cagrid.coppa.person.service.stubs.SearchRequest();
    gov.nih.nci.cagrid.coppa.person.service.stubs.SearchRequestPerson personContainer = new gov.nih.nci.cagrid.coppa.person.service.stubs.SearchRequestPerson();
    personContainer.setPerson(person);
    params.setPerson(personContainer);
    gov.nih.nci.cagrid.coppa.person.service.stubs.SearchResponse boxedResult = portType.search(params);
    return boxedResult.getPerson();
    }
  }

  public gov.nih.nci.cagrid.person.service.Person getPerson(gov.nih.nci.cagrid.coppa.iso.Ii ii) throws RemoteException, gov.nih.nci.cagrid.coppa.person.service.stubs.types.CoppaPersonServiceFault, gov.nih.nci.cagrid.coppa.person.service.stubs.types.NullifiedEntityFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerson");
    gov.nih.nci.cagrid.coppa.person.service.stubs.GetPersonRequest params = new gov.nih.nci.cagrid.coppa.person.service.stubs.GetPersonRequest();
    gov.nih.nci.cagrid.coppa.person.service.stubs.GetPersonRequestIi iiContainer = new gov.nih.nci.cagrid.coppa.person.service.stubs.GetPersonRequestIi();
    iiContainer.setIi(ii);
    params.setIi(iiContainer);
    gov.nih.nci.cagrid.coppa.person.service.stubs.GetPersonResponse boxedResult = portType.getPerson(params);
    return boxedResult.getPerson();
    }
  }

  public gov.nih.nci.cagrid.coppa.iso.Ii createPerson(gov.nih.nci.cagrid.person.service.Person person) throws RemoteException, gov.nih.nci.cagrid.coppa.person.service.stubs.types.CoppaPersonServiceFault, gov.nih.nci.cagrid.coppa.person.service.stubs.types.EntityValidationFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createPerson");
    gov.nih.nci.cagrid.coppa.person.service.stubs.CreatePersonRequest params = new gov.nih.nci.cagrid.coppa.person.service.stubs.CreatePersonRequest();
    gov.nih.nci.cagrid.coppa.person.service.stubs.CreatePersonRequestPerson personContainer = new gov.nih.nci.cagrid.coppa.person.service.stubs.CreatePersonRequestPerson();
    personContainer.setPerson(person);
    params.setPerson(personContainer);
    gov.nih.nci.cagrid.coppa.person.service.stubs.CreatePersonResponse boxedResult = portType.createPerson(params);
    return boxedResult.getIi();
    }
  }

  public void updatePerson(gov.nih.nci.cagrid.person.service.Person person) throws RemoteException, gov.nih.nci.cagrid.coppa.person.service.stubs.types.CoppaPersonServiceFault, gov.nih.nci.cagrid.coppa.person.service.stubs.types.EntityValidationFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updatePerson");
    gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonRequest params = new gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonRequest();
    gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonRequestPerson personContainer = new gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonRequestPerson();
    personContainer.setPerson(person);
    params.setPerson(personContainer);
    gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonResponse boxedResult = portType.updatePerson(params);
    }
  }

  public void updatePersonStatus(gov.nih.nci.cagrid.coppa.iso.Ii ii,gov.nih.nci.cagrid.coppa.iso.Cd cd) throws RemoteException, gov.nih.nci.cagrid.coppa.person.service.stubs.types.EntityValidationFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updatePersonStatus");
    gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonStatusRequest params = new gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonStatusRequest();
    gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonStatusRequestIi iiContainer = new gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonStatusRequestIi();
    iiContainer.setIi(ii);
    params.setIi(iiContainer);
    gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonStatusRequestCd cdContainer = new gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonStatusRequestCd();
    cdContainer.setCd(cd);
    params.setCd(cdContainer);
    gov.nih.nci.cagrid.coppa.person.service.stubs.UpdatePersonStatusResponse boxedResult = portType.updatePersonStatus(params);
    }
  }

  public gov.nih.nci.cagrid.coppa.iso.Map validate(gov.nih.nci.cagrid.person.service.Person person) throws RemoteException, gov.nih.nci.cagrid.coppa.person.service.stubs.types.CoppaPersonServiceFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"validate");
    gov.nih.nci.cagrid.coppa.person.service.stubs.ValidateRequest params = new gov.nih.nci.cagrid.coppa.person.service.stubs.ValidateRequest();
    gov.nih.nci.cagrid.coppa.person.service.stubs.ValidateRequestPerson personContainer = new gov.nih.nci.cagrid.coppa.person.service.stubs.ValidateRequestPerson();
    personContainer.setPerson(person);
    params.setPerson(personContainer);
    gov.nih.nci.cagrid.coppa.person.service.stubs.ValidateResponse boxedResult = portType.validate(params);
    return boxedResult.getMap();
    }
  }

}
