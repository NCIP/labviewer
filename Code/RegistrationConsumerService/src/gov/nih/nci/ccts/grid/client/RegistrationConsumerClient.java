package gov.nih.nci.ccts.grid.client;

import java.io.*;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.ccts.grid.stubs.RegistrationConsumerPortType;
import gov.nih.nci.ccts.grid.stubs.service.RegistrationConsumerServiceAddressingLocator;
import gov.nih.nci.ccts.grid.common.RegistrationConsumer;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.cagrid.common.Utils;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.1
 */
public class RegistrationConsumerClient extends ServiceSecurityClient implements RegistrationConsumer {
    protected RegistrationConsumerPortType portType;
    private Object portTypeMutex;

    public RegistrationConsumerClient(String url) throws MalformedURIException, RemoteException {
        this(url,null);
    }

    public RegistrationConsumerClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url,proxy);
        initialize();
    }

    public RegistrationConsumerClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr,null);
    }

    public RegistrationConsumerClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(epr,proxy);
        initialize();
    }

    private void initialize() throws RemoteException {
        this.portTypeMutex = new Object();
        this.portType = createPortType();
    }

    private RegistrationConsumerPortType createPortType() throws RemoteException {

        RegistrationConsumerServiceAddressingLocator locator = new RegistrationConsumerServiceAddressingLocator();
        // attempt to load our context sensitive wsdd file
        InputStream resourceAsStream = getClass().getResourceAsStream("client-config.wsdd");
        if (resourceAsStream != null) {
            // we found it, so tell axis to configure an engine to use it
            EngineConfiguration engineConfig = new FileProvider(resourceAsStream);
            // set the engine of the locator
            locator.setEngine(new AxisClient(engineConfig));
        }
        RegistrationConsumerPortType port = null;
        try {
            port = locator.getRegistrationConsumerPortTypePort(getEndpointReference());
        } catch (Exception e) {
            throw new RemoteException("Unable to locate portType:" + e.getMessage(), e);
        }

        return port;
    }

    public GetResourcePropertyResponse getResourceProperty(QName resourcePropertyQName) throws RemoteException {
        return portType.getResourceProperty(resourcePropertyQName);
    }

    public static void usage(){
        System.out.println(RegistrationConsumerClient.class.getName() + " -url <service url> -file <sample_message.xml>");
    }

    public static void main(String [] args){
        System.out.println("Running the Grid Service Client");
        try{
            if(!(args.length < 2)){
                if(args[0].equals("-url")){
                    RegistrationConsumerClient client = new RegistrationConsumerClient(args[1]);

                    if(args[2].equals("-file")){
                        client.runTest(args[3]);
                    }
                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    // make sure the file is on path
    private void runTest(String filename) throws Exception{
        FileReader reader = new FileReader(filename);
        InputStream is = getClass().getResourceAsStream("client-config.wsdd");

        gov.nih.nci.ccts.grid.Registration registrationMessage =
                (gov.nih.nci.ccts.grid.Registration)
                        Utils.deserializeObject(reader,gov.nih.nci.ccts.grid.Registration.class,is);
        this.register(registrationMessage);

    }

  public void rollback(gov.nih.nci.ccts.grid.Registration registration) throws RemoteException, gov.nih.nci.ccts.grid.stubs.types.InvalidRegistrationException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"rollback");
    gov.nih.nci.ccts.grid.stubs.RollbackRequest params = new gov.nih.nci.ccts.grid.stubs.RollbackRequest();
    gov.nih.nci.ccts.grid.stubs.RollbackRequestRegistration registrationContainer = new gov.nih.nci.ccts.grid.stubs.RollbackRequestRegistration();
    registrationContainer.setRegistration(registration);
    params.setRegistration(registrationContainer);
    gov.nih.nci.ccts.grid.stubs.RollbackResponse boxedResult = portType.rollback(params);
    }
  }

  public void commit(gov.nih.nci.ccts.grid.Registration registration) throws RemoteException, gov.nih.nci.ccts.grid.stubs.types.InvalidRegistrationException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"commit");
    gov.nih.nci.ccts.grid.stubs.CommitRequest params = new gov.nih.nci.ccts.grid.stubs.CommitRequest();
    gov.nih.nci.ccts.grid.stubs.CommitRequestRegistration registrationContainer = new gov.nih.nci.ccts.grid.stubs.CommitRequestRegistration();
    registrationContainer.setRegistration(registration);
    params.setRegistration(registrationContainer);
    gov.nih.nci.ccts.grid.stubs.CommitResponse boxedResult = portType.commit(params);
    }
  }

  public gov.nih.nci.ccts.grid.Registration register(gov.nih.nci.ccts.grid.Registration registration) throws RemoteException, gov.nih.nci.ccts.grid.stubs.types.InvalidRegistrationException, gov.nih.nci.ccts.grid.stubs.types.RegistrationConsumptionException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"register");
    gov.nih.nci.ccts.grid.stubs.RegisterRequest params = new gov.nih.nci.ccts.grid.stubs.RegisterRequest();
    gov.nih.nci.ccts.grid.stubs.RegisterRequestRegistration registrationContainer = new gov.nih.nci.ccts.grid.stubs.RegisterRequestRegistration();
    registrationContainer.setRegistration(registration);
    params.setRegistration(registrationContainer);
    gov.nih.nci.ccts.grid.stubs.RegisterResponse boxedResult = portType.register(params);
    return boxedResult.getRegistration();
    }
  }

}
