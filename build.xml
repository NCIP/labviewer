<project name="UPT Project" basedir="." default="all">
	<description>UPT Project Build File</description>

	<property environment="env" />
	<property name="PROP.FILE" location="build.properties"/>
	<property file="${PROP.FILE}" />
		<echo>
	        PROP.FILE = ${PROP.FILE}</echo>
	<property name="test.dir" value="test" />
	<property name="report.dir" value="${test.dir}/junitreport" />
	<property name="propertyFilePath" value="/WEB-INF/classes/baseURL.properties" />

	<!-- Cobertura -->
	<path id="cobertura.classpath">
		<fileset dir="${otherlib.home}" includes="*" />
		<fileset dir="${libext.home}" includes="*" />
		<fileset dir="lib-ext" includes="*" />
		<pathelement path="otherlib/servlet.jar" />
		<fileset dir="WebContent/WEB-INF/lib" includes="*" />
	</path>

	<!-- Cobertura -->
	<property name="cobertura.dir" value="cobertura" />
	<property name="cobertura.classes.dir" value="${cobertura.dir}/classes" />
	<property name="cobertura.instrumented.dir" value="${cobertura.dir}/instrumented" />
	<taskdef resource="tasks.properties" classpathref="cobertura.classpath" />

	<target name="init">
		<property name="webinf.home" value="${web.home}/WEB-INF" />
		<property name="lib.home" value="${webinf.home}/lib" />
		<property name="classes.home" value="${webinf.home}/classes" />
		<property name="war.file" value="${dist.home}/${app.name}.war" />
	</target>

	<target name="clean" depends="init" description="Delete the Build and Dist directories">
		<delete dir="${build.home}" />
		<delete dir="${dist.home}" />
	</target>

	<target name="prepareDir" depends="init">
		<mkdir dir="${build.home}" />
		<mkdir dir="${test.home}" />
		 <mkdir dir="${report.dir}"/>
		<mkdir dir="${build.home}/WEB-INF" />
		<mkdir dir="${build.home}/WEB-INF/tld" />
		<mkdir dir="${build.home}/WEB-INF/conf" />
		<mkdir dir="${build.home}/WEB-INF/lib" />
		<mkdir dir="${build.home}/META-INF" />
		<mkdir dir="${classes.home}" />
		<mkdir dir="${dist.home}" />
	</target>

	<target name="prepareBuild" depends="prepareDir">
		<copy todir="${build.home}">
			<fileset dir="${web.home}" />
		</copy>

		<copy todir="${build.home}/WEB-INF/">
			<fileset dir="${webinf.home}" />
		</copy>

		<copy todir="${lib.home}" overwrite="true">
			<fileset dir="${artifacts.dir}" includes="ctom*.jar" />
		</copy>

		<copy todir="${build.home}/WEB-INF/lib">
			<fileset dir="${lib.home}" includes="**/*.jar" />
		</copy>
	</target>

	<target name="prepare" depends="prepareDir,prepareBuild" />

	<target name="configure" depends="prepareDir, configureCSMAuthentication, configureWebSSOAuthentication">
		<copy file="conf/labviewer.hibernate.cfg.xml.template" toFile="${build.home}/WEB-INF/classes/labviewer.csm.new.hibernate.cfg.xml" filtering="true" overwrite="true">
			<filterset begintoken="@" endtoken="@">
				<filter token="database_dialect" value="${database.dialect}" />
				<filter token="database_driver" value="${database.driver}" />
				<filter token="database_url" value="${database.url}" />
				<filter token="database_user" value="${database.username}" />
				<filter token="database_passwd" value="${database.password}" />
			</filterset>
		</copy>
		<copy file="conf/cTODSlabviewer.hibernate.cfg.xml.template" toFile="${build.home}/WEB-INF/classes/cTODSlabviewer.hibernate.cfg.xml" filtering="true" overwrite="true">
					<filterset begintoken="@" endtoken="@">
						<filter token="database_dialect" value="${database.dialect}" />
						<filter token="database_driver" value="${database.driver}" />
						<filter token="database_url" value="${database.url}" />
						<filter token="database_user" value="${database.username}" />
						<filter token="database_passwd" value="${database.password}" />
					</filterset>
				</copy>
		<copy file="conf/log4j.properties.template" toFile="${build.home}/WEB-INF/classes/log4j.properties" filtering="true" overwrite="true">
			<filterset begintoken="@" endtoken="@">
				<filter token="log_dir" value="${log.dir}" />
			</filterset>
		</copy>
		
		<copy file="conf/labviewer.properties.template" toFile="${build.home}/WEB-INF/classes/labviewer.properties" filtering="true" overwrite="true">
			<filterset begintoken="@" endtoken="@">
				<filter token="hotLink_Type" value="${hotLink_Type}" />
				<filter token="testEnabled" value="${testEnabled}" />
				<filter token="SmokeTestGridURL" value="${SmokeTestGridURL}" />
				<filter token="websso.enabled" value="${websso.enabled}" />	
				<filter token="websso.cas.server" value="${websso.cas.server}" />
				<filter token="version" value="${version}" />
				<filter token="propertyFilePath" value="${propertyFilePath}" />
			</filterset>
		</copy>
		<copy file="conf/baseURL.properties.template" toFile="${build.home}/WEB-INF/classes/baseURL.properties" filtering="true" overwrite="true">
			<filterset begintoken="@" endtoken="@">
				<filter token="BaseURLcaAERS" value="${BaseURLcaAERS}" />
				<filter token="BaseURLC3D" value="${BaseURLC3D}" />
				<filter token="BaseURLC3PR" value="${BaseURLC3PR}" />
				<filter token="loadLabURLS" value="${loadLabURLS}" />	
				<filter token="tissueURL" value="${tissueURL}" />
			</filterset>
		</copy>
	</target>

	<target name="configureCSMAuthentication" unless="websso.enabled">
		<copy file="conf/web.xml.csm.template" toFile="${build.home}/WEB-INF/web.xml" overwrite="true" />
		<copy file="conf/login.config.template" toFile="${dist.home}/login.config" filtering="true" overwrite="true">
			<filterset begintoken="@" endtoken="@">
			    <filter token="database_driver" value="${database.driver}" />
				<filter token="database_url" value="${database.url}" />
				<filter token="database_user" value="${database.username}" />
				<filter token="database_passwd" value="${database.password}" />
			</filterset>
		</copy>
	</target>

	<target name="configureWebSSOAuthentication" if="websso.enabled">
		<copy file="conf/web.xml.sso.template" toFile="${build.home}/WEB-INF/web.xml" overwrite="true" filtering="true">
		<filterset begintoken="@" endtoken="@">
				<filter token="cert.path" value="${cert.path}" />
				<filter token="key.path" value="${key.path}" />
				<filter token="cas_server" value="${websso.cas.server}" />			
		</filterset>
		</copy>
		<copy file="conf/cas-client.properties.template" toFile="${build.home}/WEB-INF/cas-client.properties" filtering="true" overwrite="true">
			<filterset begintoken="@" endtoken="@">
				<filter token="cas_server" value="${websso.cas.server}" />
				<filter token="client_server" value="${websso.client.server}" />
			</filterset>
		</copy>
		<copy file="conf/client-config.wsdd" toFile="${build.home}/WEB-INF/classes/client-config.wsdd" overwrite="true" />
	</target>

	<target name="compile" depends="init,prepare" description="Compiles all the files in the project">
		<javac srcdir="${src.home}" destdir="${build.home}/WEB-INF/classes" debug="true" deprecation="true">
			<classpath>
				<fileset dir="${lib.home}" includes="*.jar" />
				<fileset dir="${otherlib.home}" includes="*.jar" />
				<fileset dir="${libext.home}" includes="*.jar" />
			</classpath>
		</javac>
		<copy todir="${build.home}/WEB-INF/classes" overwrite="true">
			<fileset dir="${sdkclient.home}" excludes="**/*.java" />
			<fileset file="${src.home}/gov/nih/nci/caxchange/ctom/viewer/resources/ApplicationResources.properties" />
			<fileset file="${src.home}/applicationContext.xml" />
			<fileset file="${src.home}/gov/nih/nci/caxchange/ctom/viewer/beans/LabViewerStatus.hbm.xml"/>
			<fileset file="${src.home}/gov/nih/nci/caxchange/ctom/viewer/beans/ProtocolStatus.hbm.xml"/>
			<fileset file="${src.home}/gov/nih/nci/caxchange/ctom/viewer/beans/HealthCareSitePart.hbm.xml"/>
			<fileset file="${src.home}/gov/nih/nci/caxchange/ctom/viewer/beans/Users.hbm.xml"/>
		</copy>
	</target>

	<target name="dist" depends="init,compile" description="Creates war file">
		<jar jarfile="${war.file}" basedir="${build.home}" />
		<jar jarfile="${artifacts.dir}/labviewerauth.jar">
			<fileset dir="${build.home}/WEB-INF/classes">
				<include name="**/LabViewerAuthorizationHelper.class" />
			</fileset>
		</jar>
		<copy todir="${env.CATALINA_HOME}/conf/cabig" overwrite="true">
				<fileset file="${build.home}/WEB-INF/classes/cTODSlabviewer.hibernate.cfg.xml" />
		</copy>
	</target>

	<target name="cleanup" depends="dist" description="Delete the Build directory">
		<delete dir="${build.home}" />
	</target>

	<target name="test" depends="all" description="Tests the CTOM Lab Domain model API">
		<javac srcdir="${test.home}/src" destdir="${test.home}/classes" debug="true" deprecation="true">
					<classpath>
						<pathelement path="test/resources"/>
						<pathelement path="bin"/>
						<fileset dir="${lib.home}" includes="*" />
						<fileset dir="${otherlib.home}" includes="*" />
						<fileset dir="${libext.home}" includes="*" />
						<fileset dir="lib-ext" includes="*" />
						<pathelement path="otherlib/servlet.jar"/>
						<fileset dir="WebContent/WEB-INF/lib" includes="*" />
						<pathelement path="dist/ctodslabviewer.war"/>
						<pathelement path="build/WEB-INF/classes"/>
						</classpath>
				</javac>
		
		<junit printsummary="yes" haltonfailure="yes" showoutput="yes">
			<classpath>
				<pathelement path="test/classes"/>
				<pathelement path="bin"/>
				<fileset dir="${lib.home}" includes="*" />
				<fileset dir="${otherlib.home}" includes="*" />
				<fileset dir="${libext.home}" includes="*" />
				<fileset dir="lib-ext" includes="*" />
				<pathelement path="otherlib/servlet.jar"/>
				<fileset dir="WebContent/WEB-INF/lib" includes="*" />
				<pathelement path="dist/ctodslabviewer.war"/>
			</classpath>
			<formatter type="plain"/>
			<batchtest fork="yes" todir="${report.dir}">
			    <fileset dir="${src.home}" includes="*Test.java"/>
			</batchtest>
			  <test name="gov.nih.nci.caxchange.ctom.viewer.apitest.StudySearchDAOTest" haltonfailure="no" outfile="${test.home}/testresults"/>
		</junit>
	</target>
	
	<target name="junitreport" description="Prepares the html report of the junit test execution results">
	        <junitreport todir="${report.dir}">
	            <fileset dir="${report.dir}" includes="testresults.txt"/>
	            <report todir="${report.dir}"/>
	        </junitreport>
	    </target>


	<target name="all" depends="init,clean,prepare,configure,compile,dist" description="Builds and deploys the entire application by cleaning the build and dist directories" />

	<target name="deployTomcat" depends="all">
		<copy todir="${env.CATALINA_HOME}/webapps" overwrite="true">
			<fileset file="${war.file}" />
		</copy>
		<antcall target="deployTomcatCSM" />
	</target>

	<target name="deployTomcatCSM" unless="websso.enabled">
		<copy todir="${env.CATALINA_HOME}/conf" overwrite="true">
			<fileset file="${dist.home}/login.config" />
		</copy>
		<echo message="================================================================================" />
		<echo message="Edit your Tomcat startup or set your CATALINA_OPTS environment variable with the" />
		<echo message="following." />
		<echo message="-Djava.security.auth.login.config=%CATALINA_HOME%\conf\login.config" />
		<echo message="================================================================================" />
	</target>

	<target name="deployJBoss" depends="all">
		<copy todir="${jboss.home}/server/default/deploy">
			<fileset file="${war.file}" />
		</copy>
	</target>


	<!-- ******************************************************************* -->
	<!-- ** TEST TARGETS                                                  ** -->
	<!-- ******************************************************************* -->

	<!-- Compiles the test classes before running them -->
	<target name="test:compile" depends="all">
		<delete dir="${test.home}/classes" />
		<mkdir dir="${test.home}/classes" />
		<javac srcdir="${test.home}/src" destdir="${test.home}/classes" debug="true" debuglevel="lines,source">
			<classpath>
				<pathelement path="build/WEB-INF/classes" />
				<fileset dir="WebContent/WEB-INF/lib" includes="*" />
				<fileset dir="${lib.home}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${libext.home}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${otherlib.home}">
									<include name="*.jar" />
								</fileset>
				<pathelement path="dist/ctodslabviewer.war" />
			</classpath>
		</javac>
	</target>

	<!-- Runs the unit tests and generates the coverage report -->
	<target name="test:run" depends="test:compile, test:instrument">

		<junit printsummary="yes" fork="yes" maxmemory="1024m" haltonfailure="no" haltonerror="no">
			<formatter type="plain" />

			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.dir}/cobertura.ser" />

			<classpath>
				<pathelement path="${cobertura.instrumented.dir}" />
				<pathelement path="${test.home}/classes" />
				<pathelement path="build/WEB-INF/classes" />
				<fileset dir="WebContent/WEB-INF/lib" includes="*" />
				<fileset dir="${lib.home}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${libext.home}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${otherlib.home}">
					<include name="*.jar" />
				</fileset>
			</classpath>

			<test name="gov.nih.nci.caxchange.ctom.viewer.junits.actions.AllTests" />


		</junit>

		<cobertura-report format="html" datafile="${cobertura.dir}/cobertura.ser" destdir="${cobertura.dir}" srcdir="${source.dir}" />
	</target>

	<!-- Start the selenium server in its own thread -->
	<target name="test:start-server">
		<!-- this is a 'known location' for this -->
		<java jar="./selenium/selenium-server.jar" fork="true" spawn="true">

			<arg line="-proxyInjectionMode -port 4671" />
		</java>

		<waitfor maxwait="30" maxwaitunit="second">
			<and>
				<socket server="localhost" port="4671" />
				<!-- this url will 403, so we say that it should start counting errors at 404 to skip -->
				<http url="http://localhost:4671/selenium-server/core/index.html" errorsBeginAt="404" />
			</and>
		</waitfor>
	</target>

	<!-- Stop the selenium server -->
	<target name="test:stop-server">
		<get taskname="selenium-shutdown" src="http://localhost:4671/selenium-server/driver/?cmd=shutDown" dest="result.txt" ignoreerrors="true" />
		<echo taskname="selenium-shutdown" message="DGF Errors during shutdown are expected" />
	</target>


	<!-- Instruments the application classes that are tested for coverage checking -->
	<target name="test:instrument">
		<delete file="${cobertura.dir}/cobertura.ser" />
		<delete dir="${cobertura.instrumented.dir}" />
		<mkdir dir="${cobertura.instrumented.dir}" />

		<!--  Instrument the application classes -->
		<cobertura-instrument todir="${cobertura.instrumented.dir}" datafile="${cobertura.dir}/cobertura.ser">
			<!--
	            The following line causes instrumentation to ignore any
	            source line containing a reference to log4j, for the
	            purposes of coverage reporting.
	            
	            -->
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="build/WEB-INF/classes">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
	</target>

</project>