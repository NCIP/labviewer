<?xml version="1.0"?>
<project default="help" name="Introduce Master Build File" basedir=".">

	<!-- ============================================================== -->
	<!-- MASTER BUILD FILE DO NOT EDIT OR INTRODUCE MAY OVERWRITE       -->
	<!-- In order to customize the build please edit the dev-build.xml  -->
	<!-- ============================================================== -->

	<!-- Define the environment variable -->
	<property environment="env" />

	<property file="introduce.properties" />
	<property name="introduce.ns.excludes" value="" />
	<property name="service.name" value="${introduce.skeleton.service.name}" />
	<property name="schema.path" value="${introduce.skeleton.service.name}" />

	<!-- Important directories and files -->
	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="etc.dir" value="etc" />
	<property name="tools.dir" value="tools" />
	<property name="tools.lib.dir" value="tools/lib" />
	<property name="schema.dir" value="schema" />
	<property name="mappings.file" value="${basedir}/namespace2package.mappings" />

	<!--import developers targets and properties (which can be overridden)-->
	<import file="dev-build.xml" />

	<!-- Jars -->
	<property name="jar.prefix" value="${service.name}" />
	<property name="common.jar.name" value="${jar.prefix}-common.jar" />
	<property name="client.jar.name" value="${jar.prefix}-client.jar" />
	<property name="service.jar.name" value="${jar.prefix}-service.jar" />
	<property name="stubs.jar.name" value="${jar.prefix}-stubs.jar" />
	<property name="test.jar.name" value="${jar.prefix}-tests.jar" />

	<!-- Important test directories and files -->
	<property name="test.dir" value="test" />
	<property name="test.src.dir" value="${test.dir}/src" />
	<property name="test.lib.dir" value="${test.dir}/lib" />
	<property name="test.log.dir" value="test/logs" />
	<property name="junit.results.dir" value="${test.log.dir}/junit" />


	<!-- Basic Build directories -->

	<!-- Auxiliary directory where all the intermediate files will be placed -->
	<property name="build.dir" location="build" />
	<!-- Directory for compiled service classes -->
	<property name="build.dest" location="${build.dir}/classes" />
	<property name="test.build.dest" value="${build.dir}/test/classes" />
	<!-- Directory for compiled JAR files (additional library files required by
	     the service will also be placed here) -->
	<property name="build.lib.dir" location="${build.dir}/lib" />
	<!-- Directory where stub source and class files are placed -->
	<property name="stubs.dir" location="${build.dir}/stubs-${service.name}" />
	<property name="javadoc.dir" value="${build.dir}/javadoc" />
	<!-- Stub source files -->
	<property name="stubs.src" location="${stubs.dir}/src" />
	<!-- Compiled stub classes -->
	<property name="stubs.dest" location="${stubs.dir}/classes" />
	<!-- Where we have to copy schema files inside the build directory -->
	<property name="schema.dest" location="${build.dir}/schema" />


	<!-- We want detailed error messages -->
	<property name="java.debug" value="on" />

	<!--import run ant files -->
	<import file="run-tools.xml" />

	<!--import deployment ant files -->
	<import file="build-deploy.xml" />

	<!--import developers deploy targets and properties -->
	<import file="dev-build-deploy.xml" />


	<!-- using ant contrib for contidionals, looping , and runtarget -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${tools.lib.dir}/ant-contrib.jar" />
		</classpath>
	</taskdef>


	<!-- ============================================================== -->
	<!-- Globus properties                                              -->
	<!-- ============================================================== -->
	<target name="checkGlobus" depends="setGlobus">
		<condition property="globus.not.found">
			<or>
				<not>
					<isset property="ext.globus.dir" />
				</not>
				<equals arg1="${ext.globus.dir}" arg2="" />
			</or>
		</condition>
		<fail message="Globus installation is not set in either GLOBUS_LOCATION or ext.globus.dir" if="globus.not.found" />
		<echo message="Globus: ${ext.globus.dir}" />
	</target>
	<target name="setGlobus" if="env.GLOBUS_LOCATION">
		<!-- GT4 build files and directories-->
		<property name="ext.globus.dir" value="${env.GLOBUS_LOCATION}" />
		<property name="build.stubs" location="build-stubs.xml" />
		<property name="schema.src" location="${ext.globus.dir}/share/schema" />
		<property name="build.packages" location="${ext.globus.dir}/share/globus_wsrf_common/build-packages.xml" />
		<!-- Copied from build.stubs file, as there is no way to "append" to the value in the remote file -->
		<property name="GT4.ns.excludes" value="-x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-BaseFaults-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceLifetime-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ResourceProperties-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsrf/2004/06/wsrf-WS-ServiceGroup-1.2-draft-01.wsdl -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.xsd -x http://docs.oasis-open.org/wsn/2004/06/wsn-WS-BaseNotification-1.2-draft-01.wsdl -x http://schemas.xmlsoap.org/ws/2004/04/trust -x http://schemas.xmlsoap.org/ws/2002/12/policy -x http://schemas.xmlsoap.org/ws/2002/07/utility -x http://schemas.xmlsoap.org/ws/2004/04/sc -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd -x http://www.w3.org/2000/09/xmldsig# -x http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd -x http://schemas.xmlsoap.org/ws/2004/09/enumeration" />
	</target>


	<!-- Sets up the build directory structure -->
	<target name="init" depends="checkGlobus, defineClasspaths">
		<runtarget target="preInit" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dest}" />
		<mkdir dir="${test.build.dest}" />
		<mkdir dir="${test.log.dir}" />
		<mkdir dir="${build.lib.dir}" />

		<mkdir dir="${stubs.dir}" />
		<mkdir dir="${stubs.src}" />
		<mkdir dir="${stubs.dest}" />

		<mkdir dir="${schema.dest}" />
		<copy toDir="${schema.dest}">
			<fileset dir="${schema.src}" casesensitive="yes">
				<include name="wsrf/**/*" />
				<include name="ws/**/*" />
			</fileset>
			<fileset dir="${schema.dir}" casesensitive="yes">
				<include name="**" />
			</fileset>
		</copy>

		<!-- Creates etc.dir in case it doesn't exist. Has no effect if dir already exists -->
		<mkdir dir="${etc.dir}" />
		<runtarget target="postInit" />
	</target>

	<target name="defineClasspaths" depends="checkGlobus">
		<runtarget target="defineExtendedClasspaths" />
		<path id="tasks.run.extended.classpath"/>
		<path id="base.classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${ext.globus.dir}/lib">
				<include name="*.jar" />
				<exclude name="${stubs.jar.name}" />
				<exclude name="${common.jar.name}" />
				<exclude name="${client.jar.name}" />
				<exclude name="${service.jar.name}" />
			</fileset>
			<path refid="base.extended.classpath" />
		</path>
		<path id="service.build.classpath">
			<pathelement location="${stubs.dest}" />
			<path refid="service.build.extended.classpath" />
			<path refid="base.classpath" />
		</path>
		<path id="service.run.classpath">
			<pathelement location="${build.dest}" />
			<path refid="service.run.extended.classpath" />
			<path refid="service.build.classpath" />
		</path>
		<path id="test.build.classpath">
			<fileset dir="${test.lib.dir}">
				<include name="*.jar" />
			</fileset>
			<pathelement location="${build.dest}" />
			<path refid="test.build.extended.classpath" />
			<path refid="service.build.classpath" />
		</path>
		<path id="test.run.classpath">
			<pathelement location="${test.build.dest}" />
			<path refid="test.run.extended.classpath" />
			<path refid="test.build.classpath" />
		</path>
		<path id="run.classpath">
			<pathelement location="${build.dest}" />
			<path refid="run.extended.classpath" />
			<path refid="service.build.classpath" />
			<pathelement location="${ext.globus.dir}" />
		</path>
		<path id="tasks.run.classpath">
			<path refid="tasks.run.extended.classpath" />
			<fileset dir="${tools.lib.dir}">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${lib.dir}">
				<include name="caGrid-core*.jar" />
				<include name="jdom*.jar"/>
			</fileset>
			<fileset dir="${ext.globus.dir}/lib">
				<include name="axis.jar" />
				<include name="addressing-1.0.jar" />
				<include name="xercesImpl.jar" />
				<include name="jaxrpc.jar" />
				<include name="wsrf_core.jar" />
				<include name="cog-jglobus.jar" />
				<include name="saaj.jar" />
				<include name="commons-discovery.jar" />
				<include name="wsrf_core_stubs.jar" />
			</fileset>
		</path>
	</target>

	<!-- Generate bindings for our WSDL file -->
	<!-- This is done with a GT4 tool -->
	<target name="serviceGenerateBindings" depends="init">
		<ant antfile="${build.stubs}" target="generateBinding" inheritall="false">
			<property name="source.binding.dir" value="${schema.dest}/${schema.path}" />
			<property name="target.binding.dir" value="${schema.dest}/${schema.path}" />
			<property name="porttype.wsdl" value="${interface.name}.wsdl" />
			<property name="binding.root" value="${interface.name}" />
		</ant>
	</target>

	<target name="merge" depends="init">
		<!-- Merge our namespace mappings file with the GT4 mappins file -->
		<ant antfile="${build.stubs}" target="mergePackageMapping" inheritall="false">
			<property name="mapping.src" location="${mappings.file}" />
			<property name="mapping.dst" location="${build.dir}/namespace2package.mappings" />
		</ant>
	</target>

	<!-- Generate the stub source files -->
	<!-- This is done with a GT4 tool -->
	<target name="serviceStubs" depends="serviceGenerateBindings,merge">
		<!-- Invoke the stub generator -->
		<ant antfile="${build.stubs}" target="generateStubs" inheritall="false">
			<property name="mapping.file" location="${build.dir}/namespace2package.mappings" />
			<property name="source.stubs.dir" location="${schema.dest}/${schema.path}" />
			<property name="target.stubs.dir" location="${stubs.src}" />
			<property name="wsdl.file" value="${interface.name}_service.wsdl" />
			<property name="ns.excludes" value="${GT4.ns.excludes} ${introduce.ns.excludes}" />
		</ant>
	</target>

	<!-- Generate the stub source files -->
	<!-- This is done with a GT4 tool -->
	<target name="stubs" depends="init">
		<runtarget target="preStubs" />
		<for list="${introduce.skeleton.services.list}" parallel="false" param="service.name" trim="true">
			<sequential>
				<echo message="Generating stubs for @{service.name}." />
				<antcall target="serviceStubs" inheritall="false">
					<param name="interface.name" value="@{service.name}" />
				</antcall>
			</sequential>
		</for>
		<antcall target="stubGenerationPostProcessor" />
		<runtarget target="postStubs" />
	</target>

	<target name="stubGenerationPostProcessor">
		<taskdef name="fixSoapBindingStubs" classname="gov.nih.nci.cagrid.introduce.servicetasks.axis.FixSoapBindingStub" classpathref="tasks.run.classpath">
		</taskdef>
		<fixSoapBindingStubs />
	</target>


	<!-- Compile the stubs generated in the previous step -->
	<target name="compileStubs" depends="stubs">
		<runtarget target="preCompileStubs" />
		<javac srcdir="${stubs.src}" destdir="${stubs.dest}" debug="${java.debug}" classpathref="base.classpath">
			<include name="**/*.java" />
		</javac>
		<runtarget target="postCompileStubs" />
	</target>


	<!-- Compile the implementation classes (service, resource, etc.) -->
	<target name="compile" depends="compileStubs" description="Compiles the service.">
		<runtarget target="preCompile" />
		<javac srcdir="${src.dir}" classpathref="service.build.classpath" includes="**" destdir="${build.dest}" debug="${java.debug}" deprecation="${deprecation}" />

		<!-- Copy the source code, wsdd, properties, etc to the build dir for include in the jar -->
		<copy toDir="${build.dest}">
			<fileset dir="${src.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<runtarget target="postCompile" />
	</target>


	<!-- Compile the test implementation classes (service, resource, etc.) -->
	<target name="compileTests" depends="compile">
		<runtarget target="preCompileTests" />
		<javac srcdir="${test.src.dir}" classpathref="test.build.classpath" destdir="${test.build.dest}" debug="${java.debug}" deprecation="${deprecation}" />
		<runtarget target="postCompileTests" />
	</target>


	<!-- Create a JAR file with the implementation classes -->
	<target name="jar" depends="compile">
		<runtarget target="preJar" />
		<jar jarfile="${build.lib.dir}/${client.jar.name}" basedir="${build.dest}">
			<include name="**/client/**" />
		</jar>
		<jar jarfile="${build.lib.dir}/${service.jar.name}" basedir="${build.dest}">
			<include name="**/service/**" />
		</jar>
		<jar jarfile="${build.lib.dir}/${common.jar.name}" basedir="${build.dest}">
			<include name="**/*" />
			<exclude name="**/client/**" />
			<exclude name="**/service/**" />
		</jar>
		<runtarget target="postJar" />
	</target>


	<!-- Create a JAR file with the test implementation classes -->
	<target name="jarTests" depends="jar,compileTests">
		<runtarget target="preJarTests" />
		<jar jarfile="${build.lib.dir}/${test.jar.name}" basedir="${test.build.dest}" />
		<runtarget target="postJarTests" />
	</target>


	<!-- Create a JAR file with the stub classes -->
	<target name="jarStubs" depends="compileStubs">
		<runtarget target="preJarStubs" />
		<jar destfile="${build.lib.dir}/${stubs.jar.name}" basedir="${stubs.dest}" />
		<runtarget target="postJarStubs" />
	</target>


	<!-- Empty target, in case we simply want to generate the JAR files -->
	<target name="jars" depends="jarStubs, jar, jarTests" />


	<!-- Clean up all the intermediate files -->
	<target name="clean" description="Removes all generated build artifacts.">
		<runtarget target="preClean" />
		<delete dir="tmp" />
		<delete dir="${build.dir}" />
		<delete file="${gar.name}" />
		<runtarget target="postClean" />
	</target>

	<!-- =================================================================== -->
	<!-- Builds Code Docuementation                                          -->
	<!-- =================================================================== -->
	<target name="javadoc" depends="compile" description="Creates the API documentation.">
		<javadoc packagenames="*" destdir="${javadoc.dir}" author="true" version="true" use="true" windowtitle="${service.name} API">

			<sourcepath>
				<pathelement path="${src.dir}" />
			</sourcepath>

			<classpath>
				<path refid="service.build.classpath" />
			</classpath>

			<tag name="todo" scope="all" description="To do:" />
			<tag name="created" scope="all" description="Created On:" />

		</javadoc>
	</target>

	<!-- Default target "all" builds and jars everything, including test....does not make a GAR-->
	<target name="all" depends="jars" description="Builds the entire service." />

	<target name="help" description="Prints usage information.">
		<echo message="================================================================================" />
		<echo message="|    Introduce Created Grid Service                                            |" />
		<echo message="          Service: ${service.name}" />
		<echo message="--------------------------------------------------------------------------------" />
		<echo message="|  USAGE:                                                                      |" />
		<echo message="|    Type 'ant -h' for general help with Ant                                   |" />
		<echo message="|    Type 'ant -p' for a description of this service's build targets.          |" />
		<echo message="================================================================================" />
	</target>

</project>