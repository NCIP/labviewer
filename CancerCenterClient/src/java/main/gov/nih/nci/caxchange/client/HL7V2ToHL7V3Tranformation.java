package gov.nih.nci.caxchange.client;

import static java.util.concurrent.TimeUnit.SECONDS;
import edu.knu.medinfo.hl7.v2tree.HL7MessageTreeException;
import gov.nih.nci.caadapter.ui.mapping.V2V3.ConvertFromV2ToCSV;

import java.io.File;
import java.text.FieldPosition;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;

import org.apache.log4j.Logger;

/**
 * @author asharma
 *
 */
public class HL7V2ToHL7V3Tranformation {

	// Logging File
	private static Logger logger = Logger
			.getLogger("gov.nih.nci.caxchange.client.HL7V2ToHL7V3Tranformation"); 

	private final ScheduledExecutorService scheduler = Executors
			.newScheduledThreadPool(1);

	private CancerCenterClient cancerCenterClient;
	private String fileNameLocationDateTimeStamp;
	
	public HL7V2ToHL7V3Tranformation(CancerCenterClient client){
		cancerCenterClient = client;
	}
	
	/**
	 * Starts a thread to poll the directory for HL7V2 file.
	 * It invokes the caAdapter API to convert a HL7V2 file to .CSV file.
	 * Invokes the caAdapter API to convert a generated .CSV to HL7V3.
	 * Invokes the grid service to persist the generated HL7V3 message.
	 */
	public void process(ArrayList<ScheduledExecutorService>threadList) {
	   threadList.add(scheduler);
		final Runnable fileCheck = new Runnable() {

			public void run() {
				try {
					logger.debug(Messages.getString("CancerCenterClient.128")); 
					if (!cancerCenterClient.checkPreProcessedFolder()) {
						logger.error(Messages.getString("CancerCenterClient.20")); 
						throw new Exception(
								Messages.getString("CancerCenterClient.21")); 
					} else {
						File inProcessDir = new File(cancerCenterClient.getHl7v2Dir());
						// Delete Zero Byte Files Generated by Preprocessor in
						// case of exceptions.
						File[] inProcessfileList = inProcessDir.listFiles();
						for (int i = 0; i < inProcessfileList.length; i++) {
							if (inProcessfileList[i].length() == 0)
								inProcessfileList[i].delete();
						}
						File[] fileList = inProcessDir.listFiles();
						for (int i = 0; i < fileList.length; i++) {
							String csvFileName = getFileName(fileList[i].getName().toString());
							// invokes the caAdapter API to convert a HL7V2 file
							// to HL7V3.
							boolean transformed=invokecaAdapterAPIV2toV3(fileList[i].getAbsolutePath(),csvFileName,"D:\\CCHC STUFF\\v2tov3\\v2.scs");
							if(transformed)
							{
								System.out.println("Transformed");
								boolean success = new File(csvFileName).renameTo(new File(
										cancerCenterClient.getInProcessFolder(),
										fileNameLocationDateTimeStamp));
								System.out.println("success" +success);
								boolean Tsuccess = fileList[i].renameTo(new File(
										cancerCenterClient.getRawFilesBackupDirectory(),
										fileNameLocationDateTimeStamp));
								System.out.println("Tsuccess" +Tsuccess);
								if (!success) {
									logger.error(fileList[i].toString() + "Renamed to : "
											+ csvFileName
											+ " Was not moved to the backup folder");
									} else {
									logger.debug("File Moved to Backup folder");
								}
							}
						}
					}
				} catch (Exception e) {
					logger.fatal(Messages.getString("CancerCenterClient.22")); 
				}
			}

		};
		final ScheduledFuture<?> fileCheckHandle = scheduler
				.scheduleAtFixedRate(fileCheck,cancerCenterClient.getInitialDelay_long(),
						cancerCenterClient.getPollingInterval_long(), SECONDS);
	}

	
	/**
	 * Invokes the caAdapter API to convert the HL7V2 message file to HL7V3
	 * message. This is a 2 step process 
	 * 1.Convert HL7V2 to .CSV file 
	 * 2.Convert .CSV file to HL7V3 message - 
	 * 	call the method callTocaAdapterAPI() to perform the transformation.
	 * @param hl7FileName
	 * @param csvFileName
	 * @param scsFileName
	 * @throws Exception
	 */
	public boolean invokecaAdapterAPIV2toV3(String hl7FileName,String csvFileName,String scsFileName) throws Exception {
	      boolean flag =false;
		try {
			String hl7v2file =  hl7FileName.replace('\\', '\\');// input v2 message file
			String metaDir = "./v2Meta";// v2 meta data directory
			String csvFile = csvFileName.replace('/', '\\');             // output csv file
			String scsFile = scsFileName.replace('/', '\\');              // scs file for validation
			String msgtype="ORU^R01";                  // message type
			String version = "2.4";                      // target version
			 // Constructor
	        ConvertFromV2ToCSV con = new ConvertFromV2ToCSV(metaDir
	                                                        , hl7v2file           
	                                                        , msgtype
	                                                        , version
	                                                        , csvFile
	                                                        , scsFile
	                                                        , false                      // this value must be false
	                                                      );
	        flag=con.isSuccessful();  
			if (!flag) {
				List<String> errList = con.getErrorMessages();
				for(String messages: errList){
				  logger.error(messages);
				}
			}
		} catch (Exception e) {
			logger.error(Messages.getString("CancerCenterClient.51"), e 
					.fillInStackTrace());
		}
		return flag;
	}
   
	/**
	 * @param fileName
	 * @return
	 */
	private String getFileName(String fileName)
	{
		// Get Current Date and Time for Stamping the file
		Date dt = new Date();
		long currentTime = dt.getTime();
		StringBuffer sbuf = new StringBuffer();
		StringBuffer outbuf = new StringBuffer();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy_MM_dd_HH_mm_ss");

		sbuf = sdf.format(dt, outbuf, new FieldPosition(0));
		
		String[] strFile = fileName.split("\\."); 
	    fileNameLocationDateTimeStamp =  cancerCenterClient.getLocation() + "_" + sbuf + "_" + "V2TOV3"
		+ "_" + strFile[0] +".csv";
		String outFile = cancerCenterClient.getRawFilesBackupDirectory()+"\\"+ fileNameLocationDateTimeStamp;
		return outFile;
	}
}
