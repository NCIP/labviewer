package gov.nih.nci.caxchange.client;

import static java.util.concurrent.TimeUnit.SECONDS;
import edu.knu.medinfo.hl7.v2tree.HL7MessageTreeException;
import gov.nih.nci.caadapter.common.util.FileUtil;
import gov.nih.nci.caadapter.ui.mapping.V2V3.V2Converter;

import java.io.File;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;

import org.apache.log4j.Logger;

/**
 * @author asharma
 *
 */
public class HL7V2ToHL7V3Tranformation {

	// Logging File
	private static Logger logger = Logger
			.getLogger("gov.nih.nci.caxchange.client.HL7V2ToHL7V3Tranformation"); 

	private final ScheduledExecutorService scheduler = Executors
			.newScheduledThreadPool(1);

	private CancerCenterClient cancerCenterClient;
	
	public HL7V2ToHL7V3Tranformation(CancerCenterClient client){
		cancerCenterClient = client;
	}
	
	/**
	 * Starts a thread to poll the directory for HL7V2 file.
	 * It invokes the caAdapter API to convert a HL7V2 file to .CSV file.
	 * Invokes the caAdapter API to convert a generated .CSV to HL7V3.
	 * Invokes the grid service to persist the generated HL7V3 message.
	 */
	public void process() {

		final Runnable fileCheck = new Runnable() {

			public void run() {
				try {
					logger.debug(Messages.getString("CancerCenterClient.128")); 
					if (!cancerCenterClient.checkPreProcessedFolder()) {
						logger.error(Messages.getString("CancerCenterClient.20")); 
						throw new Exception(
								Messages.getString("CancerCenterClient.21")); 
					} else {
						File inProcessDir = new File(cancerCenterClient.getHl7v2Dir());
						// Delete Zero Byte Files Generated by Preprocessor in
						// case of exceptions.
						File[] inProcessfileList = inProcessDir.listFiles();
						for (int i = 0; i < inProcessfileList.length; i++) {
							if (inProcessfileList[i].length() == 0)
								inProcessfileList[i].delete();
						}
						File[] fileList = inProcessDir.listFiles();
						for (int i = 0; i < fileList.length; i++) {
							// invokes the caAdapter API to convert a HL7V2 file
							// to HL7V3.
							String cvsFileName = invokecaAdapterAPIV2toV3(fileList[i].getAbsolutePath());
							// invokes the grid service to persist the HL7V3
							// message.
							if(cvsFileName!=null){
							HL7V3Transformation hl7v3Transformation = new HL7V3Transformation(cancerCenterClient);
							String hl7v3 = hl7v3Transformation.invokecaAdapterAPI(cvsFileName);
							hl7v3Transformation.invokeGridService(fileList, i, hl7v3);
							}
						}
					}
				} catch (Exception e) {
					logger.fatal(Messages.getString("CancerCenterClient.22")); 
				}
			}

		};
		final ScheduledFuture<?> fileCheckHandle = scheduler
				.scheduleAtFixedRate(fileCheck,cancerCenterClient.getInitialDelay_long(),
						cancerCenterClient.getPollingInterval_long(), SECONDS);
	}

	
	
	/**
	 * Invokes the caAdapter API to convert the HL7V2 message file to HL7V3
	 * message. This is a 2 step process 
	 * 1.Convert HL7V2 to .CSV file 
	 * 2.Convert .CSV file to HL7V3 message - 
	 * 	call the method callTocaAdapterAPI() to perform the transformation.
	 * @throws Exception
	 */
	public String invokecaAdapterAPIV2toV3(String hl7FileName) throws Exception {
		//String hl7FileName = "D:/Development/CancerCenterClient/src/java/main/gov/nih/nci/caxchange/client/HL7V2.xml"; 
		String csvFileName = "";//"D:/Development/CancerCenterClient/src/java/main/gov/nih/nci/caxchange/client/HL7V2.cvs"; 
		String scsFileName = "";//"D:/Development/CancerCenterClient/src/java/main/gov/nih/nci/caxchange/client/HL7V2.scs"; 
		try {
			V2Converter con = new V2Converter(FileUtil.getV2DataDirPath());
			con.convertV2ToCSV(hl7FileName, csvFileName, scsFileName);
			if (!con.isCSVValid()) {
				List<String> errList = con.getValidationMessages();
			}
		} catch (HL7MessageTreeException e) {
			logger.error(Messages.getString("CancerCenterClient.51"), e 
					.fillInStackTrace());
		}
		return csvFileName;
		
	
	}

}
